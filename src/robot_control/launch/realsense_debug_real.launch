<launch>  
    <!-- 加载机器人模型到参数空间 -->
        <!-- robot_description-->
        <param name="robot_description" textfile="$(find robot_moveit_config4)/config/gazebo_robot.urdf" /> //param 主要用于在参数服务器上设置参数,参数源可以在标签中通过value指定,也可以通过外部文件加载,此时加载机器人模型
        <!-- 开启路径执行服务器 -->
        <!-- <node name="action_server" pkg="robot_control" type="action_server" respawn="false" output="screen"/> -->
        <!-- 坐标变换 -->
        <node name="pub_joint_state" pkg="robot_control" type="pub_joint_state.py" respawn="false" output="screen" />   //node pkg对应的功能包名称,name节点名称,type可执行文件名称
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />   // spawn 当roslaunch启动完所有节点之后,会检测每一个节点,对于该节点,当它终止时,roslaunch会将该节点重启
   
    <!-- 打开moveit的action server,包括环境设置server -->
        <include file="$(find robot_moveit_config4)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="false"/>
            <arg name="moveit_controller_manager" value="simple" /> <!-- simple moveit controller manager,将路径发送至每个joint的controller,controller list已配置 -->
            <arg name="fake_execution_type" value="interpolate"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
            <arg name="pipeline" value="ompl"/>
            <arg name="load_robot_description" value="false"/>
        </include>

    <!-- 进行路径规划 -->
        <!-- realsense rgb,depth,点云信息   rgb,点云发布于camera_color_optical_frame -->
            <include file="$(find robot_control)/launch/realsense_set.launch">
                <arg name="output" value="log"/>
            </include>
        <!-- realsense与robot连接坐标变换 -->
            <node pkg="tf2_ros" type="static_transform_publisher" name="static_transform_publisher_camera_realsense" args="0 0 0 0 0 0 /rgbd_camera /camera_link" />
        <!-- 打开点云查询服务 -->
            <node pkg="robot_control" type="get_pointcloud_3d_service" name="get_pointcloud_3d_service" />
        <!-- 打开位姿获取，发布目标box_temp坐标系相对camera_link静态tf -->
            <node pkg="robot_control" type="get_target_frame.py" name="get_target_frame" respawn="false" output="screen"/>
        <!-- 发布box坐标系相对world静态tf，以及在world中的pose -->
            <node pkg="robot_control" type="get_target_world_pose_step1.py" name="get_target_world_pose_step1" respawn="false" output="screen"/>
            <node pkg="robot_control" type="get_target_world_pose_step2.py" name="get_target_world_pose_step2" respawn="false" output="screen"/>
        <!-- 打开环境建图，路径规划并执行仿真 -->
            <node name="get_robot_path" pkg="robot_control" type="get_robot_path.py" respawn="false" output="screen"/> <!-- unknow frame box -->

    <!-- 启动rviz ;运行rviz可视化界面-->
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find robot_control)/rviz/test_real.rviz"/>
    
</launch>