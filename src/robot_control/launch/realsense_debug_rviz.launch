<launch>  
    <!-- 加载机器人模型到参数空间 -->
        <!-- robot_description + joint_limit + 运动学求解器 -->
        <include file="$(find robot_moveit_config4)/launch/planning_context.launch">
            <arg name="load_robot_description" value="true" />
        </include>
        <!-- 坐标变换 -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
        </node>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
        
    <!-- 打开moveit的action server,包括环境设置server -->
        <include file="$(find robot_moveit_config4)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>
            <arg name="moveit_controller_manager" value="fake" />
            <arg name="fake_execution_type" value="interpolate"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
            <arg name="pipeline" value="ompl"/>
            <arg name="load_robot_description" value="false"/>
        </include>

    <!-- 进行路径规划 -->
        <!-- realsense rgb,depth,点云信息   rgb,点云发布于camera_color_optical_frame -->
            <include file="$(find robot_control)/launch/realsense_set.launch"/>
        <!-- realsense与robot连接坐标变换 -->
            <node pkg="tf2_ros" type="static_transform_publisher" name="static_transform_publisher_camera_realsense" args="0 0 0 0 0 0 /rgbd_camera /camera_link" />
        <!-- 打开点云查询服务 -->
            <node pkg="robot_control" type="get_pointcloud_3d_service" name="get_pointcloud_3d_service" />
        <!-- 打开位姿获取，发布目标box_temp坐标系相对camera_link静态tf -->
            <node pkg="robot_control" type="get_target_frame.py" name="get_target_frame" respawn="false" output="screen"/>
        <!-- 发布box坐标系相对world静态tf，以及在world中的pose -->
            <node pkg="robot_control" type="get_target_world_pose_step1.py" name="get_target_world_pose_step1" respawn="false" output="screen"/>
            <node pkg="robot_control" type="get_target_world_pose_step2.py" name="get_target_world_pose_step2" respawn="false" output="screen"/>
        <!-- 打开环境建图，路径规划并执行仿真 -->
            <node name="get_robot_path" pkg="robot_control" type="get_robot_path.py" respawn="false" output="screen"/>

    <!-- 启动rviz -->
            <node pkg="rviz" type="rviz" name="rviz" args="-d $(find robot_control)/rviz/test.rviz"/>

    <!-- 显示调试 -->
            <!-- <node pkg="robot_control" type="lib_get_rgb_pos.py" name="lib_get_rgb_pos" /> -->
</launch>